
import {Game, User, Player, Auth} from "./dao-interfaces";

var AWS = require("aws-sdk");
AWS.config.update({region: "us-east-1"});
var dynamodb = new AWS.DynamoDB({apiVersion: "2012-08-10"});
var documentClient = new AWS.DynamoDB.DocumentClient();

const gameTableName = "Game";
const userTableName = "User";
const playerTableName = "Player";
const authTableName = "Auth";

//TODO: Come up with a factory system?

//gets (single item)

export async function getGame(gameCode: string): Promise<Game | undefined> {
    try {
        const params = {
            Key: {
             "id": {"S": gameCode}, 
            }, 
            TableName: gameTableName
        };
        const result = await dynamodb.getItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function getUser(userID: string): Promise<User | undefined> {
    try {
        const params = {
            Key: {
             "code": {"S": userID}, 
            }, 
            TableName: userTableName
        };
        const result = await dynamodb.getItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function getPlayer(playerID: string): Promise<Player | undefined> {
    try {
        const params = {
            Key: {
             "id": {"S": playerID}, 
            }, 
            TableName: playerTableName
        };
        const result = await dynamodb.getItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function getAuth(authID: string): Promise<Auth | undefined> {
    try {
        const params = {
            Key: {
             "id": {"S": authID}, 
            }, 
            TableName: authTableName
        };
        const result = await dynamodb.getItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

//gets (batch)

export async function getPlayersForGame(gameCode: string): Promise<Player[] | undefined> {
    try {
        const params = {
            KeyConditionExpression: 'gameCode = :game-code',
            ExpressionAttributeValues: {
                ':game-code': gameCode
            },
            TableName: playerTableName
        };
        const result = await documentClient.query(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

//puts (single item)

export async function putGame(game : Game): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: gameTableName,
            Item: {
                "code": game["code"],
                "display-name": game["display-name"],
                "id":  game["host-name"]
            }
        };
        const result = await dynamodb.putItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function putUser(user : User): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: userTableName,
            Item: {
                "id": user["id"],
                "phone-number": user["phone-number"],
                "email":  user["email"]
            }
        };
        const result = await dynamodb.putItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function putPlayer(player : Player): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: playerTableName,
            Item: {
                "id": player["id"],
                "display-name": player["display-name"],
                "game-code":  player["game-code"],
                "assigned-to": player["assigned-to"]
            }
        };
        const result = await dynamodb.putItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}


export async function putAuth(auth : Auth): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: authTableName,
            Item: {
                "id": auth["id"],
                "otp": auth["otp"],
                "auth-token":  auth["auth-token"]
            }
        };
        const result = await dynamodb.putItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

// updates (single item) TODO: do we want to keep these? Or would using only "put" be simpler?
// put replaces an item while update only updates the fields

export async function updateGame(game : Game): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: gameTableName,
            Item: {
                "code": game["code"],
                "display-name": game["display-name"],
                "id":  game["host-name"]
            }
        };
        const result = await dynamodb.updateItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function updateUser(user : User): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: userTableName,
            Item: {
                "id": user["id"],
                "phone-number": user["phone-number"],
                "email":  user["email"]
            }
        };
        const result = await dynamodb.updateItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

export async function updatePlayer(player : Player): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: playerTableName,
            Item: {
                "id": player["id"],
                "display-name": player["display-name"],
                "game-code":  player["game-code"],
                "assigned-to": player["assigned-to"]
            }
        };
        const result = await dynamodb.updateItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}


export async function updateAuth(auth : Auth): Promise<boolean | undefined> { //TODO: check what we're returning
    try {
        const params = {
            TableName: authTableName,
            Item: {
                "id": auth["id"],
                "otp": auth["otp"],
                "auth-token":  auth["auth-token"]
            }
        };
        const result = await dynamodb.updateItem(params).promise()
        return result;
    } catch (error) {
        console.error(error);
    }
}

//TODO: set up deletes





